export type AbstractBigNumber = {
  readonly _hex: string;
  readonly _isBigNumber: boolean;
  fromTwos(value: number): AbstractBigNumber;
  toTwos(value: number): AbstractBigNumber;
  abs(): AbstractBigNumber;
  // add(other: BigNumberish): AbstractBigNumber;
  // sub(other: BigNumberish): AbstractBigNumber;
  // div(other: BigNumberish): AbstractBigNumber;
  // mul(other: BigNumberish): AbstractBigNumber;
  // mod(other: BigNumberish): AbstractBigNumber;
  // pow(other: BigNumberish): AbstractBigNumber;
  // and(other: BigNumberish): AbstractBigNumber;
  // or(other: BigNumberish): AbstractBigNumber;
  // xor(other: BigNumberish): AbstractBigNumber;
  mask(value: number): AbstractBigNumber;
  shl(value: number): AbstractBigNumber;
  shr(value: number): AbstractBigNumber;
  // eq(other: BigNumberish): boolean;
  // lt(other: BigNumberish): boolean;
  // lte(other: BigNumberish): boolean;
  // gt(other: BigNumberish): boolean;
  // gte(other: BigNumberish): boolean;
  isNegative(): boolean;
  isZero(): boolean;
  toNumber(): number;
  toBigInt(): bigint;
  toString(): string;
  toHexString(): string;
  toJSON(key?: string): any;
  // Add other necessary methods and properties of BigNumber
} & any;